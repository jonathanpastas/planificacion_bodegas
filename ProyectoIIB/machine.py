# -*- coding: utf-8 -*-
"""
Created on Mon Jan 27 07:09:37 2020

@author: MSI GL
"""
import numpy as np
from sklearn import datasets, linear_model
import statsmodels.api as sm  ## Este proporciona funciones para la estimación de muchos modelos estadísticos
import statsmodels.formula.api as smf
import math
import matplotlib.pyplot as plt

col_names = ['cantidad', 'largo', 'ancho', 'alto', 'estado', 'precio']
dataframe = pd.read_csv(r"D:\Pedidos_222.csv", names=col_names)
x = np.array(dataframe[['cantidad', 'largo', 'ancho', 'alto', 'estado']])

y = np.array(
    [244083.72, 418557.57, 84960.91, 550976.80, 334388.96, 358354.49, 860052.01, 494420.36, 226689.13, 451599.35,
     444653.86, 558229.77,
     484802.72, 352061.53, 444229.80, 260430.86, 354456.80, 859790.63, 949902.05, 642717.26, 343957.37, 943296.45,
     474827.09, 481549.69,
     649780.70, 991811.01, 541226.76, 97706.51, 470013.49, 320989.11, 284471.30, 180941.96, 620881.85, 66985.31,
     263361.97, 423585.24,
     415060.41, 278968.01, 602496.79, 622816.74, 723106.73, 855221.28, 231875.72, 690704.59, 446926.87, 347967.79,
     829743.79, 441115.29,
     396349.78, 456644.69, 699817.11, 169713.12, 675920.77, 594262.38, 841351.35, 401935.65, 872391.54, 790461.51,
     161606.72, 438098.82,
     872118.04, 215852.78, 176536.40, 750182.66, 585381.82, 546268.34, 346906.18, 982288.41, 397092.79, 623474.39,
     998033.21, 121908.52,
     417266.15, 554108.19, 398074.55, 160675.18, 927838.34, 253665.34, 310573.78, 531271.49, 624425.85, 220604.18,
     566886.76, 823139.38,
     172002.24, 864360.46, 755755.11, 357128.52, 252464.95, 583821.22, 313600.45, 846261.80, 983996.13, 147148.89,
     386866.44, 487655.53,
     647648.56, 928152.26, 273733.70, 104155.39, 999874.88, 400499.07, 680565.02, 186780.71, 223989.11, 901725.04,
     346371.50, 784071.80,
     600137.13, 757151.90, 661783.14, 639759.74, 811462.56, 368438.62, 451351.06, 585298.55, 950513.94, 400207.43,
     640274.83, 194762.86,
     697087.20, 827996.44, 744459.27, 532226.97, 259180.50, 261534.97, 820194.52, 819662.03, 213336.39, 19324.93,
     537613.72, 541283.69,
     402236.45, 591050.21, 551589.83, 73343.82, 949727.49, 629098.04, 986261.27, 930856.60, 828798.88, 750965.46,
     626673.84, 825730.12,
     134797.68, 642880.35, 557973.35, 62186.27, 325893.98, 758059.62, 470841.16, 839304.61, 595660.62, 275535.71,
     320524.56, 210333.25,
     20547.69, 258134.32, 550933.70, 315390.25, 153577.70, 695115.21, 481071.66, 93470.55, 197331.59, 759942.85,
     935308.15, 227563.55,
     641030.39, 157160.15, 277050.27, 664065.52, 197097.93, 958250.54, 469082.71, 888355.73, 784236.67, 844930.94,
     857006.15, 780087.15,
     357444.67, 490435.63, 304389.82, 532754.08, 976851.52, 948528.83, 968767.62, 596518.88, 992375.19, 50147.69,
     870540.20, 230285.52,
     908401.79, 202021.67, 866422.38, 138570.57, 205819.41, 309040.59, 375956.03, 416202.89, 557489.98, 138058.69,
     569646.10, 293353.89,
     606435.79, 179545.80, 507132.21, 639372.78, 589775.03, 493428.99, 632478.35, 524243.30, 953108.74, 114415.60,
     499457.67, 232720.01,
     11249.99, 440249.43, 348291.56, 422451.67, 804601.17, 47095.59, 295521.89, 625657.14, 266004.48, 921421.44,
     951671.36, 696989.92,
     762630.58, 299819.00, 807760.24, 952905.13, 517188.49, 533414.88, 694901.64, 899659.81, 698422.27, 257353.61,
     714262.56, 303569.18,
     919180.08, 768493.26, 85782.12, 287004.83, 144300.19, 257461.77, 270183.84, 262012.53, 927221.10, 331758.20,
     375775.73, 950953.98,
     551531.84, 349762.77, 696029.49, 699551.70, 459078.87, 420684.23, 63899.72, 27336.44, 232498.83, 675847.36,
     338569.16, 985839.15,
     654125.32, 846735.17, 631113.97, 719563.09, 835349.84, 350636.34, 943042.40, 114928.75, 748700.76, 938477.59,
     302610.77, 762960.57,
     32823.26, 959706.66, 145679.02, 9600.61, 369170.25, 736557.62, 778049.16, 366188.19, 765063.67, 19987.04,
     717836.08, 269018.97, 679092.94,
     299535.53, 102625.94, 417621.57, 675958.31, 582149.06, 397896.36, 699537.79, 706906.69])

from sklearn.model_selection import train_test_split

# Separo los datos de "train" en entrenamiento y prueba para probar los algoritmos
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=40)

lr = linear_model.LinearRegression()
lr.fit(X_train, y_train)
lr.coef_
lr.intercept_

Y_pred = lr.predict(X_test)

print("PRESION DEL MODELO :", lr.score(X_train, y_train))


def media(valores):
    return sum(valores) / len(valores)


def evaluacion_rendimiento(yt, ypre):
    error = yt - ypre
    print(error)
    MAE = sum(abs(error)) / len(error)
    MSE = sum(pow(error, 2)) / len(error)
    RMSE = math.sqrt(MSE)
    SCE = sum(pow(error, 2))
    median = float(media(yt))
    STC = sum(pow(yt - median, 2))
    SCR = STC - SCE
    c = str(lr.coef_)
    coef = c.split()
    r2 = SCR / STC
    r2_adj = 1 - (1 - r2) * ((len(y_test) - 1) / (len(yt) - (len(coef) - 1) - 1))

    return MAE, MSE, RMSE, r2, r2_adj


MAE1, MSE1, RMSE1, r21, r2_adj1 = evaluacion_rendimiento(y_test, Y_pred)
print("RESULTADO DE MAE :", float(MAE1))
print("RESULTADO DE MSE :", float(MSE1))
print("RESULTADO DE RMSE :", float(RMSE1))
print("RESULTADO DE r2 :", float(r21))
print("RESULTADO DE r2 Ajustado :", float(r2_adj1))

# Grafica Correlacion
dataframe.corr(method="pearson")
plt.matshow(dataframe.corr())
